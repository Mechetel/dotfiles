snippet #!
  #!/usr/bin/env python3

snippet imp
  import ${0:module}

snippet from
  from ${1:package} import ${0:module}

snippet wh
  while ${1:condition}:
    ${0:${VISUAL}}

# dowh - does the same as do...while in other languages
snippet dowh
  while True:
    ${1}
    if ${0:condition}:
      break

snippet with
  with ${1:expr} as ${2:var}:
    ${0:${VISUAL}}

snippet awith
  async with ${1:expr} as ${2:var}:
    ${0:${VISUAL}}

snippet     def
abbr        def function(...): ...
options     head
  def ${1:`expand('%:t:r:r:r')`}(${2}):
    ${0:pass}

snippet     class
abbr        class Class(...): ...
options     head
  class ${1:`expand('%:t:r:r:r')`}(${2:object}):
    def __init__(self, ${3}):
      ${0:pass}


# New Class
snippet cl
  class ${1:ClassName}(${2:object}):
    def __init__(self, ${4:arg}):
      ${5:super($1, self).__init__()}
      self.$4 = $4
      ${0}

snippet cla
  class ${1:class_name}:

snippet clai
  class ${1:class_name}:
    def __init__(self, ${3:args}):
      ${0}

# New Function
snippet def
  def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
    ${0}

snippet deff
  def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
    ${0}

snippet adef
  async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
    ${0}

snippet adeff
  async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
    ${0}

# New Method
snippet defi
  def __init__(self, ${1:args}):
    ${0}

snippet defm
  def ${1:mname}(self, ${2:arg}):
    ${0}

snippet adefm
  async def ${1:mname}(self, ${2:arg}):
    ${0}

# New Property
snippet property
  @property
  def ${1:foo}(self) -> ${2:type}:
    return self._$1

  @$1.setter
  def $1(self, value: $2):
    self._$1 = value

# Ifs
snippet if
  if ${1:condition}:
    ${0:${VISUAL}}

snippet el
  else:
    ${0:${VISUAL}}

snippet ei
  elif ${1:condition}:
    ${0:${VISUAL}}

# For
snippet for
  for ${1:item} in ${2:items}:
    ${0}

# Lambda
snippet ld
  ${1:var} = lambda ${2:vars} : ${0:action}

snippet ret
  return ${0}

snippet .
  self.

snippet sa self.attribute = attribute

  self.${1:attribute} = $1

snippet try Try/Except
  try:
    ${1:${VISUAL}}
  except ${2:Exception} as ${3:e}:
    ${0:raise $3}

snippet trye Try/Except/Else
  try:
    ${1:${VISUAL}}
  except ${2:Exception} as ${3:e}:
    ${4:raise $3}
  else:
    ${0}

snippet tryf Try/Except/Finally
  try:
    ${1:${VISUAL}}
  except ${2:Exception} as ${3:e}:
    ${4:raise $3}
  finally:
    ${0}

snippet tryef Try/Except/Else/Finally
  try:
    ${1:${VISUAL}}
  except ${2:Exception} as ${3:e}:
    ${4:raise $3}
  else:
    ${5}
  finally:
    ${0}

# if __name__ == '__main__':
snippet ifmain
  if __name__ == '__main__':
    ${0:main()}

# __magic__
snippet _
  __${1:init}__

snippet "
  """${0:doc}
  """
# assertions
snippet a=
  self.assertEqual(${0}, ${1})

# test function/method
snippet test
  def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
    ${0}

# test case
snippet testcase
  class ${1:ExampleCase}(unittest.TestCase):
    def test_${2:description}(self):
      ${0}

# test given when then
snippet tgwt
  # given: ${1}
  # when: ${2}
  # then: ${3}

snippet dol
  def ${1:__init__}(self, *args, **kwargs):
      super(${0:ClassName}, self).$1(*args, **kwargs)

snippet kwg
  self.${1:var_name} = kwargs.get('$1', ${2:None})

snippet lkwg
  ${1:var_name} = kwargs.get('$1', ${2:None})

snippet args
  *args${1:,}${0}

snippet kwargs
  **kwargs${1:,}${0}

snippet akw
  *args, **kwargs${1:,}${0}

# comprehensions
snippet lcp
abbr    list comprehension
  [${1} for ${2} in ${3:${VISUAL}}]${0}

snippet dcp
abbr    dict comprehension
  {${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}

snippet scp
abbr    set comprehension
  {${1} for ${2} in ${3:${VISUAL}}}${0}



# Model Fields

# Note: Optional arguments are using defaults that match what Django will use
# as a default, e.g. with max_length fields.  Doing this as a form of self
# documentation and to make it easy to know whether you should override the
# default or not.

# Note: Optional arguments that are booleans will use the opposite since you
# can either not specify them, or override them, e.g. auto_now_add=False.

snippet auto
abbr    Django auto
  ${1:FIELDNAME} = models.AutoField(${0})
snippet bigint
abbr    Django bigint
  ${1:FIELDNAME} = models.BigIntegerField(${0})
snippet binary
abbr    Django binary
  ${1:FIELDNAME} = models.BinaryField(${0})
snippet bool
abbr    Django bool
  ${1:FIELDNAME} = models.BooleanField(${0:default=True})
snippet char
abbr    Django char
  ${1:FIELDNAME} = models.CharField(max_length=${2}${0:, blank=True})
snippet comma
abbr    Django comma
  ${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${0:, blank=True})
snippet date
abbr    Django date
  ${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet datetime
abbr    Django datetime
  ${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet decimal
abbr    Django decimal
  ${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${0})
snippet email
abbr    Django email
  ${1:FIELDNAME} = models.EmailField(max_length=${2:75}${0:, blank=True})
snippet file
abbr    Django file
  ${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${0:, max_length=100})
snippet filepath
abbr    Django filepath
  ${1:FIELDNAME} = models.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${0:, blank=True, })
snippet float
abbr    Django float
  ${1:FIELDNAME} = models.FloatField(${0})
snippet image
abbr    Django image
  ${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${0:, max_length=100})
snippet int
abbr    Django int
  ${1:FIELDNAME} = models.IntegerField(${0})
snippet ip
abbr    Django ip
  ${1:FIELDNAME} = models.IPAddressField(${0})
snippet nullbool
abbr    Django nullbool
  ${1:FIELDNAME} = models.NullBooleanField(${0})
snippet posint
abbr    Django posint
  ${1:FIELDNAME} = models.PositiveIntegerField(${0})
snippet possmallint
abbr    Django possmallint
  ${1:FIELDNAME} = models.PositiveSmallIntegerField(${0})
snippet slug
abbr    Django slug
  ${1:FIELDNAME} = models.SlugField(max_length=${2:50}${0:, blank=True})
snippet smallint
abbr    Django smallint
  ${1:FIELDNAME} = models.SmallIntegerField(${0})
snippet text
abbr    Django text
  ${1:FIELDNAME} = models.TextField(${0:blank=True})
snippet time
abbr    Django time
  ${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet url
abbr    Django url
  ${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${0:, blank=True})
snippet xml
abbr    Django xml
  ${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${0:, blank=True})
# Relational Fields
snippet fk
abbr    Django fk
  ${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${0:, to_field=''})
snippet m2m
abbr    Django m2m
  ${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${0:, db_table=''})
snippet o2o
abbr    Django o2o
  ${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${0:, to_field=''})

# Code Skeletons

snippet form
  class ${1:FormName}(forms.Form):
    ${0}

snippet model
  class ${1:ModelName}(models.Model):
    ${3}

    class Meta:
      ${4}

    def __unicode__(self):
      ${5}

    def save(self, *args, **kwargs):
      ${6}

    @models.permalink
    def get_absolute_url(self):
      return ('${7:view_or_url_name}' ${0})

snippet modeladmin
  class ${1:ModelName}Admin(admin.ModelAdmin):
    ${0}

  admin.site.register($1, $1Admin)

snippet tabularinline
  class ${0:ModelName}Inline(admin.TabularInline):
    model = $1

snippet stackedinline
  class ${0:ModelName}Inline(admin.StackedInline):
    model = $1

snippet r2r
  return render_to_response('${1:template.html}', {
      ${2}
    }${0:, context_instance=RequestContext(request)}
  )
