snippet      import
alias        i
abbr         import ...
  import ${1}

snippet      importas
alias        ia
abbr         import ... as ...
  import ${1} as $1

# hard-tab is necessary
snippet      case
alias        c
abbr         case ... of
  case ${1} of
    ${2} -> ${0}

snippet      main
abbr         main = do
  main :: Effect Unit
  main = do
    ${0}

snippet     class
options     head
  class ${1:Class} ${2:a} where
    ${3:function} :: ${4:Type}

snippet     instance
options     head
  instance ${1:Class} ${2:Type} where
    ${3:function} ${4:self} = ${0:TARGET}

snippet     lambda
alias       l
abbr        Î»
  \ ${1:x} -> ${0}


snippet mod
  module `substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')`
    (
    ) where

  import Prelude

  ${0}
snippet imp
  import ${0:Data.List}
snippet impq
  import ${1:Data.List} as ${0:List}
snippet fn0
  ${1:name} :: ${2:a}
  $1 = ${0:undefined}
snippet fn
  ${1:fn} :: ${2:a} -> ${3:a}
  $1 ${4}= ${0}
snippet fn1
  ${1:fn} :: ${2:a} -> ${3:a}
  $1 ${4}= ${0}
snippet fn2
  ${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}
  $1 ${5}= ${0}
snippet fn3
  ${1:fn} :: ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}
  $1 ${6}= ${0}
snippet case
  case ${1} of
    ${2} -> ${0}
snippet let
  let
    ${1} = ${2}
  in
    ${3}
snippet where
  where
    ${1} = ${0}
snippet testunit
  module Test.Main where

  import Prelude
  import Test.Unit (suite, test)
  import Test.Unit.Main (runTest)
  import Test.Unit.Assert as Assert

  main = runTest do
    suite "${1}" do
      test "${2:the tests run}" do
        Assert.equal
          "Hello, world!"
          "Hello, sailor!"
snippet if
  if ${1} then
    ${2:${VISUAL}}
  else
    ${0}
snippet doc
  {-| ${0}
  -}
snippet ty
  type ${1:Type} =
    ${0}
snippet da
  data ${1:Type} =
    ${0:$1}
snippet nty
  newtype ${1:Type} =
    ${2:$1} ${0:Int}
snippet fi
  foreign import ${1} :: ${2}
